#include <Game.h>

Game::Game():m_window(sf::VideoMode(800, 608), "Lux Ex Machina"),m_isRunning(false){
	m_window.setVerticalSyncEnabled(true);
	m_window.setKeyRepeatEnabled(false);
}

void Game::start(){
	if(!m_isRunning){
		m_isRunning=true;
		loop();
	}
}

void Game::loop(){
	sf::Clock clock;

	const int map1[] =  {
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,0,1,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,0,10,11,1,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,0,10,20,21,11,1,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,0,10,20,61,61,21,11,1,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,0,10,20,61,61,61,61,21,11,1,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,0,10,61,61,61,61,61,61,61,21,11,3,3,3,3,3,3,3,3,3,
	3,3,3,3,0,10,20,61,61,61,61,61,61,61,61,61,3,3,3,3,3,3,3,3,3,
	3,3,3,3,10,20,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,3,3,3,3,
	3,3,3,3,20,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
	61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
	61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
	61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
	61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
	61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
	61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61
	};

	const int map2[] =  {
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,4,5,6,7,8,9,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,12,13,14,15,16,17,18,19,3,3,3,3,
	2,3,4,5,6,7,8,9,3,3,3,3,3,22,23,24,25,26,27,28,29,3,3,3,3,
	12,13,14,15,16,17,18,19,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	22,23,24,25,26,27,28,29,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	};

	const int map3[] =  {
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,2,3,4,5,6,7,8,9,3,3,2,3,4,5,6,7,8,
	3,3,3,3,3,3,3,3,12,13,14,15,16,17,18,19,3,3,12,13,14,15,16,17,18,
	7,8,9,3,3,3,3,3,22,23,24,25,26,27,28,29,3,3,22,23,24,25,26,27,28,
	17,18,19,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	27,28,29,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	};

	const int map4[] =  {
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,
	3,3,3,3,3,3,3,3,3,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,
	3,3,3,3,3,3,3,3,3,50,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
	3,3,3,3,3,3,3,3,3,50,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
	3,3,3,3,3,3,3,3,3,50,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,	
	3,3,3,3,3,3,3,3,3,50,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
	3,3,3,3,3,3,3,3,3,50,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
	3,3,3,3,3,3,3,3,3,50,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
	3,3,3,3,3,3,3,3,3,50,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61
	};

	const int map5[] =  {
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	31,31,31,31,31,31,31,31,31,31,31,32,3,3,3,3,3,3,3,3,3,3,3,3,3,
	41,41,41,41,41,41,41,41,41,41,41,42,3,3,3,3,3,3,3,3,3,3,3,3,3,
	61,61,61,61,61,61,61,61,61,61,61,52,3,3,3,3,3,3,3,3,3,3,3,3,3
	};

	m_map[0].load("img/map.png", sf::Vector2u(32,32), map1, 25, 19);
	m_map[1].load("img/map.png", sf::Vector2u(32,32), map2, 25, 19);
	m_map[2].load("img/map.png", sf::Vector2u(32,32), map3, 25, 19);
	m_map[3].load("img/map.png", sf::Vector2u(32,32), map4, 25, 19);
	m_map[4].load("img/map.png", sf::Vector2u(32,32), map5, 25, 19);

	while (m_window.isOpen()) {
		sf::Time elapsed = clock.restart();
		sf::Event event;

		while (m_window.pollEvent(event)) {
			if (event.type == sf::Event::Closed || (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Escape)){
				exit();
			}
			if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::P){
				m_isRunning = !m_isRunning;
			}
		}

		if (m_isRunning) {
			m_window.clear();
			m_character.animate(elapsed);
			for (unsigned int i = 0; i < 5; ++i)
				m_window.draw(m_map[i]);
			m_window.draw(m_character.getSprite());
			m_window.display();
		}
	}
}

void Game::exit(){
	m_window.close();
	m_isRunning = false;
}